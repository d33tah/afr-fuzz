#!/usr/bin/env python

"""A tiny attempt at building a fuzzer that uses American Fuzzy Lop's
instrumentation, but in Python. Currently it doesn't do much."""

import sys
from StringIO import StringIO
import random
import os
import string
from shm_instrumentation import SHMInstrumentation, MAP_SIZE
import threading
import time
try:
    import humanize

    def humanize_time(t):
        return humanize.time.naturaldelta(t)
except ImportError:
    def humanize_time(t):
        return str(t)


class AFLFuzz(object):

    def __init__(self, target):
        self.target = target
        self.devnull = open(os.path.devnull)
        self.instr = SHMInstrumentation()
        self.procs_ran = 0
        self.crashes = 0
        self.hangs = 0

    def print_stats(self):
        while self.running:
            time.sleep(1)
            now = time.time()
            secs = now - self.started
            print(("max=%-06s execs/s=%-10s execs=%-10s "
                   "crashes=%-06s hangs=%-6s elapsed=%s") %
                  (self.max_score, "%0.2f" % (self.procs_ran / secs),
                   self.procs_ran, self.crashes, self.hangs,
                   humanize_time(secs)))

    def case_score(self, case):
        # print("Trying %s" % repr(case))
        n, crashed, hung = self.instr.go(self.target, self.devnull,
                                         StringIO(case), stderr=self.devnull,
                                         timeout=0.1)
        if crashed:
            print("Crashed [%d] with payload: %s" % (crashed, repr(case)))
        self.crashes += 1 if crashed else 0
        self.hangs += 1 if hung else 0
        self.procs_ran += 1
        return MAP_SIZE - n.count('\x00')

    def gen_random_case(self):
        return ''.join(chr(random.randint(0, 255)) for i in range(10))

    def run(self):
        self.started = time.time()
        self.max_score = 0
        self.running = True
        threading.Thread(target=self.print_stats).start()
        cases = {str(self.gen_random_case()): None for i in range(10)}
        while True:
            for case in cases:
                cases[case] = self.case_score(case)
            cases_sorted = sorted(cases.items(), key=lambda x: x[1])

            if cases_sorted[-1][1] > self.max_score:
                self.max_score = cases_sorted[-1][1]

            # print("max=%d,%s" % (cases_sorted[-1][1],
            #                      repr(cases_sorted[-1][0])))

            # Replace worst cases with new ones
            del cases_sorted[0]
            del cases_sorted[0]
            cases_sorted = [(self.gen_random_case(), None)] + cases_sorted
            cases_sorted = [(self.gen_random_case(), None)] + cases_sorted

            # Randomly mutate the best case
            s = bytearray(cases_sorted[-1][0])
            i = random.randint(0, 9)
            s[i] = chr(random.randint(0, 255))
            cases_sorted[-1] = (str(s), None)
            cases = dict(cases_sorted)

if __name__ == '__main__':
    a = None
    try:
        a = AFLFuzz(sys.argv[1:])
        a.run()
    except KeyboardInterrupt:
        print("Aborting because of KeyboardInterrupt")
        a.running = False
    finally:
        if a:
            a.running = False
